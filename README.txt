AVRAM Marius 324CB 
Tema 3 - Trimiterea de mesaje folosind socketi TCP 

Pentru rezolvarea temei am pornit de la rezolvarea laboratorului 8. Pentru toate mesajele cu exceptia celui de tip 3 si 7, adica message si getfile implementarea nu difera mult fata de cea de la laborator. In sensul ca acolo se trimit pur si simplu informatii catre server si serverul iti raspunde cu informatiile de care ai nevoie. In toate cazurile am incercat sa tin cont cat mai mult de erorile posibile ce pot aparea la utilizarea cu comenzi gresite a programului. Am tratat cazurile in care se introduce o comanda ce nu exista, parametrii unei comenzi lipsesc complet sau sunt incompleti, se doresc informatii despre un client care nu exista in structura serverului, se doresc fisiere care nu exista la share, se doreste a adauga un fisier la share care nu exista local, etc. 

La server pentru a tine informatii despre toti clientii conectati (adresa ip, portul, numele si fd prin care serverul primeste informatii de la ei) am folosit doua mapuri. Primul are drept chei file descriptori pri care serverul primeste informatii de la clientii respectivi. File descriptori sunt assignati unic de catre sistem de aceea un map mi s-a parut solutia naturala. La intrarea in sistem a unui client serverul nu are de unde sa stie daca numele acestuia este unic sau nu pentru ca mai trebuie sa primeasca un mesaj din partea acestuia. De aceea mai am un map in care cheile sunt numele clientilor iar valorile sunt pointeri catre structurile ce contin informatii despre clienti. Acesti pointeri indica catre structurile din mapul ce are drept chei file descriptori. Daca in cel de-al doilea map nu exista clientul nou adaugat atunci clientul va fi acceptat de catre sistem si respins in caz contrar.

Tot in structura clientInfo am un map de fisiere sharuite de clientul respectiv. Din nou un map pentru ca numele fisierului este unic si pentru ca am dorit sa retin dimensiunea asociata fiecarui fisier. Acest lucru e necesar in transferul de fisiere. Clientul care doreste sa ia un fisier de la alt client trebuie sa stie ce dimensiune are fisierul pentru a stii cand sa se opreasca din asteptat mesaje. In cazul in care nu s-ar fi oprit clientul ar fi ramas blocat (in asteaptare).

Pentru a trimite un mesaj de la un client la altul am folosit o coada pentru fiecare client destinatie in care stochez ultimul mesaj introdus de la tastaura. De asemenea am trimis o interogare catre serverul central referitoare la informatii despre clientul catre care dorim sa trimitem mesajul. Atunci cand vine un mesaj de la server cu antetul 'message' se scoate primul mesaj din coada, se creaza un socket temporar si se trimite mesajul catre acesta. Am optat pentru o structura de tip coada pentru ca in cazul real pot aparea delayuri in retea si clientul poate tasta mai multe mesaje pana sa vina informatia de la server.

Aceasi coazi le-am folosit-o si pentru transferul de fisiere. Tot aici puneam informatiile utile cum ar fi numele fisierului pe care il doream de la client. Diferentierea intre  cozile care sunt destinate mesajelor si cele destinate transferului consta in faptul ca cele pentru mesaje contin drept cheie terminatia "_file", terminatie care se scoate atunci cand trimitem catre client cererea de fisier.

Pentru transferul de fisiere mai exista doua mapuri. Un map este folosit pentru cazul in care clientul doreste sa ia de la altcineva (downloadeze) si celalt folosit pentru cazul in care clientul da altui client date sharuite.

Toate punctele din cerinta sunt complet implementate.
